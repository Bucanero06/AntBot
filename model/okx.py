from sqlalchemy import Column, String, Integer, Enum, ForeignKey
from sqlalchemy.orm import relationship

from data.config import Base
from pyokx.data_structures import (InstType)


# class OrderModel(Base):
#     __tablename__ = 'orders'
#     id = Column(Integer, primary_key=True)
#     accFillSz = Column(String)
#     algoClOrdId = Column(String)
#     algoId = Column(String)
#     attachAlgoClOrdId = Column(String)
#     avgPx = Column(String)
#     cTime = Column(String)
#     cancelSource = Column(String)
#     cancelSourceReason = Column(String)
#     category = Column(String)
#     ccy = Column(String)
#     clOrdId = Column(String)
#     fee = Column(String)
#     feeCcy = Column(String)
#     fillPx = Column(String)
#     fillSz = Column(String)
#     fillTime = Column(String)
#     instId = Column(String)
#     instType = Column(Enum(InstType))
#     lever = Column(String)
#     ordId = Column(String)
#     ordType = Column(String)
#     pnl = Column(String)
#     posSide = Column(String)
#     px = Column(String)
#     pxType = Column(String)
#     pxUsd = Column(String)
#     pxVol = Column(String)
#     quickMgnType = Column(String)
#     rebate = Column(String)
#     rebateCcy = Column(String)
#     reduceOnly = Column(String)
#     side = Column(String)
#     slOrdPx = Column(String)
#     slTriggerPx = Column(String)
#     slTriggerPxType = Column(String)
#     source = Column(String)
#     state = Column(String)
#     stpId = Column(String)
#     stpMode = Column(String)
#     sz = Column(String)
#     tag = Column(String)
#     tdMode = Column(String)
#     tgtCcy = Column(String)
#     tpOrdPx = Column(String)
#     tpTriggerPx = Column(String)
#     tpTriggerPxType = Column(String)
#     tradeId = Column(String)
#     uTime = Column(String)
#     status_report_id = Column(Integer, ForeignKey('status_reports.id'))
#
#     # Define relationships
#     status_report = relationship("InstrumentStatusReportModel",
#                                  back_populates="orders")
#
#
# class PositionModel(Base):
#     __tablename__ = 'positions'
#     id = Column(Integer, primary_key=True)
#     adl = Column(String)
#     availPos = Column(String)
#     avgPx = Column(String)
#     baseBal = Column(String)
#     baseBorrowed = Column(String)
#     baseInterest = Column(String)
#     bePx = Column(String)
#     bizRefId = Column(String)
#     bizRefType = Column(String)
#     cTime = Column(String)
#     ccy = Column(String)
#     closeOrderAlgo = Column(String)
#     deltaBS = Column(String)
#     deltaPA = Column(String)
#     fee = Column(String)
#     fundingFee = Column(String)
#     gammaBS = Column(String)
#     gammaPA = Column(String)
#     idxPx = Column(String)
#     imr = Column(String)
#     instId = Column(String)
#     instType = Column(Enum(InstType))
#     interest = Column(String)
#     last = Column(String)
#     lever = Column(String)
#     liab = Column(String)
#     liabCcy = Column(String)
#     liqPenalty = Column(String)
#     liqPx = Column(String)
#     margin = Column(String)
#     markPx = Column(String)
#     mgnMode = Column(String)
#     mgnRatio = Column(String)
#     mmr = Column(String)
#     notionalUsd = Column(String)
#     optVal = Column(String)
#     pendingCloseOrdLiabVal = Column(String)
#     pnl = Column(String)
#     pos = Column(String)
#     posCcy = Column(String)
#     posId = Column(String)
#     posSide = Column(String)
#     quoteBal = Column(String)
#     quoteBorrowed = Column(String)
#     quoteInterest = Column(String)
#     realizedPnl = Column(String)
#     spotInUseAmt = Column(String)
#     spotInUseCcy = Column(String)
#     thetaBS = Column(String)
#     thetaPA = Column(String)
#     tradeId = Column(String)
#     uTime = Column(String)
#     upl = Column(String)
#     uplLastPx = Column(String)
#     uplRatio = Column(String)
#     uplRatioLastPx = Column(String)
#     usdPx = Column(String)
#     vegaBS = Column(String)
#     vegaPA = Column(String)
#     status_report_id = Column(Integer, ForeignKey('status_reports.id'))
#
#     # Define relationships
#     status_report = relationship("InstrumentStatusReportModel",
#                                  back_populates="positions")
#
#
# class AlgoOrderModel(Base):
#     __tablename__ = 'algo_orders'
#     id = Column(Integer, primary_key=True)
#     activePx = Column(String)
#     actualPx = Column(String)
#     actualSide = Column(String)
#     actualSz = Column(String)
#     algoClOrdId = Column(String)
#     algoId = Column(String)
#     amendPxOnTriggerType = Column(String)
#     attachAlgoOrds = Column(String)
#     cTime = Column(String)
#     callbackRatio = Column(String)
#     callbackSpread = Column(String)
#     ccy = Column(String)
#     clOrdId = Column(String)
#     closeFraction = Column(String)
#     failCode = Column(String)
#     instId = Column(String)
#     instType = Column(Enum(InstType))
#     last = Column(String)
#     lever = Column(String)
#     moveTriggerPx = Column(String)
#     ordId = Column(String)
#     ordIdList = Column(String)
#     ordPx = Column(String)
#     ordType = Column(String)
#     posSide = Column(String)
#     pxLimit = Column(String)
#     pxSpread = Column(String)
#     pxVar = Column(String)
#     quickMgnType = Column(String)
#     reduceOnly = Column(String)
#     side = Column(String)
#     slOrdPx = Column(String)
#     slTriggerPx = Column(String)
#     slTriggerPxType = Column(String)
#     state = Column(String)
#     sz = Column(String)
#     szLimit = Column(String)
#     tag = Column(String)
#     tdMode = Column(String)
#     tgtCcy = Column(String)
#     timeInterval = Column(String)
#     tpOrdPx = Column(String)
#     tpTriggerPx = Column(String)
#     tpTriggerPxType = Column(String)
#     triggerPx = Column(String)
#     triggerPxType = Column(String)
#     triggerTime = Column(String)
#     status_report_id = Column(Integer, ForeignKey('status_reports.id'))
#
#     # Define relationships
#     status_report = relationship("InstrumentStatusReportModel",
#                                  back_populates="algo_orders")
#
#
#
# class InstrumentStatusReportModel(Base):
#     __tablename__ = 'status_reports'
#
#     id = Column(Integer, primary_key=True, index=True)
#     timestamp = Column(String)
#     instID = Column(String)
#     orders = relationship("OrderModel", back_populates="status_report")
#     positions = relationship("Position", back_populates="status_report")
#     algo_orders = relationship("AlgoOrderModel", back_populates="status_report")
#
